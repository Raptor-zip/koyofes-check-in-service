{
  "info": {
    "name": "FastAPI Firestore Sample",
    "_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef0123456789",
    "description": "Collection for testing the FastAPI + Firestore emulator sample (POST /items, GET /items/:id)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "created_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Create item",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"postman-test\",\n  \"value\": 99\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/items",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "items"
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const data = pm.response.json();",
              "pm.test('status is 200', () => pm.response.to.have.status(200));",
              "pm.test('has id', () => pm.expect(data).to.have.property('id'));",
              "if (data.id) { pm.environment.set('created_id', data.id); }"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get item",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/items/{{created_id}}",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "items",
            "{{created_id}}"
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('status is 200', () => pm.response.to.have.status(200));",
              "const data = pm.response.json();",
              "pm.test('has name and value', () => {",
              "  pm.expect(data).to.have.property('name');",
              "  pm.expect(data).to.have.property('value');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ]
}
